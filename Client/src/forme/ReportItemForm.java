/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package forme;

import communication.Communication;
import domain.Department;
import domain.Procedure;
import domain.ReportItem;
import java.time.LocalDate;
import java.time.LocalTime;
import java.time.format.DateTimeFormatter;
import java.util.List;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;
import operations.Operation;
import transfer.ClientRequest;
import transfer.ServerResponse;

/**
 *
 * @author USER
 */
public class ReportItemForm extends javax.swing.JDialog {

    /**
     * Creates new form ReportItemForm
     */
boolean isSelected=false;
        private  Department d;
        private LocalDate minDate;
        private LocalTime minTime;
    SpinnerDateModel dateModel;
    SpinnerDateModel timeModel;
    ReportItem r;
    
    public ReportItemForm(Department d,java.awt.Dialog parent, boolean modal) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(null);
         dateModel = new SpinnerDateModel();
         timeModel = new SpinnerDateModel();

        dateSpinner.setModel(dateModel);
        timeSpinner.setModel(timeModel);
        
        JSpinner.DateEditor dateEditor = new JSpinner.DateEditor(dateSpinner, "dd.MM.yyyy");
        JSpinner.DateEditor timeEditor = new JSpinner.DateEditor(timeSpinner, "HH:mm");
        
        
        dateSpinner.setEditor(dateEditor); // Formatiranje datuma
        timeSpinner.setEditor(timeEditor);
        
        //CMB
        this.d=d;
        fillCmb(d);
    }
    
    private LocalDate datetoLocalDate(){//datum iz spinnera
    java.util.Date givenDate = (java.util.Date) dateSpinner.getValue();
    java.sql.Date sqlDate = new java.sql.Date(givenDate.getTime());
    LocalDate localDate = sqlDate.toLocalDate();
     return localDate;
    }
      private LocalTime timetoLocalTime(){//vreme iz spinnera
    java.util.Date givenTime = (java.util.Date) timeSpinner.getValue();
    java.sql.Time sqlTime = new java.sql.Time(givenTime.getTime());
    LocalTime localTime = sqlTime.toLocalTime();
    return localTime;
    }
    
    public void setMinDateTime(LocalDate minDate, LocalTime minTime) {
    this.minDate = minDate;
    this.minTime = minTime;
       
    
    // Postavljanje minimalnog datuma na spinner model
    //LocalDate u java.sql.Date NE STAVLJAMO START DA BI IZBACILO GRESKEEE vec setvalue!!!!!!
    //dateModel.setStart(java.sql.Date.valueOf(minDate)); // Postavlja minimalni datum
    //timeModel.setStart(java.sql.Date.valueOf(minDate));
    //  početne vrednosti spinnera
    dateSpinner.setValue(java.sql.Date.valueOf(minDate));
    timeSpinner.setValue(java.sql.Time.valueOf(minTime));
   
}
public ReportItem getReportItem() {
    
r = new ReportItem();
    //  Uneti datum i vreme sa spinnera
    LocalDate itemDate = datetoLocalDate();
    LocalTime itemTime = timetoLocalTime();

    // Validacija datuma
    // Ako je sve validno, postavi vrednosti u ReportItem
    r.setDate(itemDate);
    r.setTime(itemTime);

    // Validacija procedure
    Procedure selectedProcedure = (Procedure) cmbProcedure.getSelectedItem();
    r.setProcedure(selectedProcedure);

    return r;
}

/*POPUNJAVANJE CMB SA PROCEDURAMA KOJE SU U TOM ODELENJU*/
private void fillCmb(Department d){
    try{
    ClientRequest kz=new ClientRequest();
    kz.setOperacija(Operation.VRATI_PROCEDURE);
    kz.setObjekatOperacije(new Procedure(d));
    
    Communication.getInstance().posaljiZahtev(kz);
    ServerResponse so=Communication.getInstance().primiOdgovor();
    if (so == null || so.getOdgovor() == null) {
    JOptionPane.showMessageDialog(this, "Nije moguće dobiti podatke sa servera.", "Greška", JOptionPane.ERROR_MESSAGE);
    return;
    }
    List <Procedure> p=(List<Procedure>) so.getOdgovor();
    cmbProcedure.setModel(new DefaultComboBoxModel(p.toArray()));} catch (Exception ex) {
    JOptionPane.showMessageDialog(this, "Veza sa serverom je prekinuta!", "Greška", JOptionPane.ERROR_MESSAGE);
    System.exit(0); 
}
}
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        dateSpinner = new javax.swing.JSpinner();
        timeSpinner = new javax.swing.JSpinner();
        cmbProcedure = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel1.setText("Datum");

        jLabel2.setText("Vreme");

        jLabel3.setText("Naziv procedure");

        cmbProcedure.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbProcedureActionPerformed(evt);
            }
        });

        jButton1.setText("SAČUVAJ");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(timeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(67, 67, 67)
                                    .addComponent(dateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(75, 75, 75)
                                .addComponent(cmbProcedure, javax.swing.GroupLayout.PREFERRED_SIZE, 497, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(274, 274, 274)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(dateSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(timeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(cmbProcedure, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(28, 28, 28)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbProcedureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbProcedureActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbProcedureActionPerformed
public boolean toSave(){
return isSelected;
}
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
LocalDate itemDate = datetoLocalDate();
LocalTime itemTime = timetoLocalTime();

    // Validacija datuma i vremena
    if (itemDate.isBefore(minDate)) {
        JOptionPane.showMessageDialog(this, 
            "Uneti datum ne može biti pre " + minDate.format(DateTimeFormatter.ofPattern("dd.MM.yyyy")), 
            "Nevažeći datum", 
            JOptionPane.ERROR_MESSAGE);
        return;
    }
    if (itemDate.equals(minDate) && itemTime.isBefore(minTime)) {
        JOptionPane.showMessageDialog(this, 
            "Uneto vreme ne može biti pre " + minTime.format(DateTimeFormatter.ofPattern("HH:mm")), 
            "Nevažeće vreme", 
            JOptionPane.ERROR_MESSAGE);
        return;
    }

    Procedure selectedProcedure = (Procedure) cmbProcedure.getSelectedItem();
      
            int i=JOptionPane.showConfirmDialog(this, "Da li ste sigurni da želite dodati selektovanu proceduru?", "", JOptionPane.YES_NO_OPTION);
           if(i==JOptionPane.YES_OPTION){
         
    // Postavljanje vrednosti
    r = new ReportItem();
    r.setDate(itemDate);
    r.setTime(itemTime);
    r.setProcedure(selectedProcedure);
    isSelected=true;
    this.dispose(); // Zatvori dijalog
               
           }
        


    }//GEN-LAST:event_jButton1ActionPerformed

 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbProcedure;
    private javax.swing.JSpinner dateSpinner;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JSpinner timeSpinner;
    // End of variables declaration//GEN-END:variables

}
